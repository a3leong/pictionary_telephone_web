Tasklist:

Up for discussion:
-Should all the data be converted to image format on server or client side?
-What should users be able to save (PDF, some kind of formatted image?)
-How to resolve different canvas sizes created from different phone/screen sizes?


Aaron
- Add try/catches in place of if/elses
+ Standardize and write documentation for payload format (object attribute names and expected data) 
+ Rewrite this.function's to Class.prototype.function = 
- Require/support custom names for players (people should be able to see who drew/wrote what)
+ Create clientinfo class (websocket, playerid)
+ Create socketpool support for player class (array of player classes now and also support individual message sending)
- Convert data to pdf or list of images
+ Create phrase data class
+ Create canvas draw data class (to URL base64)
+ Figure out canvas data transport method
+ Assign websocket instances to array entries
- Handle a DC
- Handle DC before gamestart (auto-boot player)
- Add kick functionality for host
- Create ping/pong functions to keep things alive


Wes
- Create message handler
- Create DOM handler
- Create a single page application
  - Create setup view (kick players, remove)
  - Create phrase view (input text chars)
  - Create draw view (html5 canvas)- 2 line thicknesses and eraser (no colors cause thats too easy)
  - Create results view
-Create some kind of system to display results (each person gets their own set back like in the original game?)
    -> Flipbook?
- Make it look pretty
- Extra: pdf pages save option?
